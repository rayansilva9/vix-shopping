import React, { memo, useMemo, useRef, useState } from 'react'
import { db } from '../../lib/firebase'
import Head from 'next/head'
import useElementOnScreen from '../../hooks/useElementOnScreen'
import SectionComments from '../../components/productPage/sessaoComentario'
import { SlArrowRight } from 'react-icons/sl'
import BtnCheckout from '../../components/productPage/btnCheckout'
import SectionDescricao from '../../components/productPage/sessaoDescriçao'
import ProductView from '../../components/productPage/productView'
import ProductPayInfo from '../../components/productPage/productPayInfo'
import productProps from '../../@types/product'
import client from '../../lib/mongo'

export const getStaticPaths = async () => {
  await client.connect()
  const db = client.db('loja')
  const coll = db.collection('produtos')
  const cursor = coll.find({})
  const docs = await cursor.toArray()

  const paths = docs.map(item => ({
    params: {
      productPage: item.id.toString() // Transforma o ObjectId em string
    }
  }))

  return {
    paths,
    fallback: false
  }
}

export const getStaticProps = async ({ params }) => {
  await client.connect()
  const db = client.db('loja')
  const coll = db.collection('produtos')

  const objectId = params.productPage // Pega o ObjectId da URL
  const filter = { id: objectId } // Cria um filtro com o ObjectId
  const doc = await coll.findOne(filter) // Busca o documento usando o filtro

  // Converte o _id para string
  const serializedDoc = {
    ...doc,
    _id: doc._id.toString()
  }

  return {
    props: {
      produto: serializedDoc // Passa o documento como prop
    }
  }
}

interface CustomHTMLUListElement extends HTMLUListElement {
  scrollLeft: number
  // Outras propriedades personalizadas, se necessário
}

const Product: React.FC<productProps> = ({ produto }) => {
  const sectionComments = useRef(null)
  const miniImagesRef = useRef<CustomHTMLUListElement | null>(null)

  function scrollMiniImg(direction: string) {
    if (direction == 'right') {
      miniImagesRef.current.scrollLeft = 100
    } else {
      miniImagesRef.current.scrollLeft = -100
    }
  }

  const [showSctComments, setSctComments] = useState(false)
  const [quantidadeUnitariaToBuy, setQuantidadeUnitariaToBuy] = useState(1)
  const [varidedade, setVariedade] = useState<string[] | null[]>([
    '123321:13321,123321:12332'
  ])
  // const [varidedade, setVariedade] = useState<string[] | null[]>(function () {
  //   const names = []
  //   for (let index = 0; index < produto.optVal.length; index++) {
  //     const a = produto.optVal[index].name + ':' + produto.optVal[index].values[0].name
  //     names.push(a)
  //   }
  //   return names
  // })

  function MudarVariedade(index: number, novoValor: string) {
    setVariedade(prev => {
      // Crie uma cópia do array original
      const varidadeCopy = [...prev]
      // Atualize o valor na posição especificada
      varidadeCopy[index] = novoValor
      return varidadeCopy // Atualize o estado com a cópia modificada
    })
  }

  const [currentImg, setCurrentImg] = useState<number>(0)
  const [altCurrentImg, setAltCurrentImg] = useState<string>('')

  const isCommentsVisible = useElementOnScreen(
    { root: null, rootMargin: '1px', threshold: 0.1 },
    sectionComments
  )
  useMemo(() => {
    if (isCommentsVisible) {
      setSctComments(true)
    }
  }, [isCommentsVisible])

  function topFunction() {
    document.body.scrollTop = 0
    document.documentElement.scrollTop = 0
  }

  return (
    <>
      <Head>
        <title>{produto.name}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <meta content="index, follow" name="robots" />
        <meta
          data-rh="true"
          name="keywords"
          content="Pen Drive, pen Drive, pen drive, pen drive 256, Pen drive 256,Pen Drive 256"
        />
      </Head>
      <>
        <button
          type="submit"
          className="w-[60px] cursor-pointer h-[60px] flex items-center justify-center bg-blue-500 fixed bottom-6 right-5 rounded-full"
          onClick={() => {
            topFunction()
          }}
        >
          <SlArrowRight
            style={{ transform: 'rotate(270deg)' }}
            className="relative -left-[1px] text-white"
          />
        </button>
        <main
          style={{ background: 'rgb(241, 241, 241)' }}
          className="min-h-screen xl:h-auto pb-24 select-none"
        >
          <section className="w-full xl:w-screen xl:px-[108px] lg:py-6 mx-auto flex flex-col items-center xl:justify-center xl:flex-row xl:gap-5">
            <ProductView
              MudarVariedade={MudarVariedade}
              altCurrentImg={altCurrentImg}
              currentImg={currentImg}
              miniImagesRef={miniImagesRef}
              photos={produto.photos}
              productName={produto.name}
              productPrice={produto.precos}
              productRating={produto.rating}
              productVariedades={produto.optVal}
              scrollMiniImg={scrollMiniImg}
              setAltCurrentImg={setAltCurrentImg}
              setCurrentImg={setCurrentImg}
              productVariedadesOnView={varidedade}
            />
            <ProductPayInfo
              id={produto.id}
              photo={produto.photos[0]}
              prico={produto.precos}
              name={produto.name}
              docId={produto.docId}
              priceId={produto.priceId}
              quantidade={quantidadeUnitariaToBuy}
              setQuantidadeUnitariaToBuy={setQuantidadeUnitariaToBuy}
              variedade={varidedade}
            />
          </section>
          <SectionDescricao productDescription={produto.desc} />
          <SectionComments
            produto={{
              feedback: produto.feedback,
              rating: 4.7
            }}
          />
          <BtnCheckout
            id={produto.id}
            photo={produto.photos[0]}
            name={produto.name}
            preço={produto.precos}
            priceId={produto.priceId}
            quantidade={quantidadeUnitariaToBuy}
            variedade={varidedade}
          />
        </main>
      </>
    </>
  )
}

export default memo(Product)
